class Ghost {
    
    static Array ghost_image;

    // private
    field MoveableObj prototype; // simulate "inheritance" behavior
    field int state; // 0-transparent 1-weak 2-normal
    field int phase; // 0-scatter 1-chase
    field int id;
    field int targetXChunk;
    field int targetYChunk;
    field int image_state;

    // public
    // initializer
    function void init(){
        let ghost_image = Array.new(2);
        let ghost_image[0] = Ghost.generate_ghost_image(0);
        let ghost_image[1] = Ghost.generate_ghost_image(1);
        return;
    }
    function void release(){
        do Ghost.release_ghost_image(ghost_image[0]);
        do Ghost.release_ghost_image(ghost_image[1]);
        do ghost_image.dispose();
        return;
    }
    // constructor
    constructor Ghost new(int Id, int startXChunk, int startYChunk, int direction){
        let prototype = MoveableObj.new(startXChunk*8, startYChunk*8, 4, direction);
        let state = 2;
        let id = Id;
        let image_state = 0;
        let phase = 0;
        let targetXChunk = 4;
        let targetYChunk = 19;
        return this;
    }

    // deconstructor
    method void dispose(){
        do prototype.dispose();
        do Memory.deAlloc(this);
        return;
    }

    // interface-1 is_transparent() -> return whether the ghost is transparent or not
    method boolean is_transparent(){
        if (state = 0){
            return true;
        }
        return false;
    }

    // interface-2 update_direction() -> set the direction of the ghost
    method void update_direction(Map map){
        
        var int newDir;
        var int originalNextXChunk;
        var int originalNextYChunk;
        var Array temp;
        var int tempSize;
        var int ind;
        let newDir = -1;
        
        if ((~(Game.is_chunk_start(get_x()))) | (~(Game.is_chunk_start(get_y())))){
            return;
        }
        
        if (phase = 1){
            return;
        }
        else{
            let newDir = best_direction(map);
        }
        
        if (false){ // debugging random mode
            let originalNextXChunk = get_x_near_chunk(prototype.get_direction());
            let originalNextYChunk = get_y_near_chunk(prototype.get_direction());
            if (false){
                return;
            }
            else{
                // random
                
                if (map.get_chunk_info(originalNextXChunk, originalNextYChunk) = -1){
                    let temp = Array.new(4);
                    let tempSize = 0;
                    let ind = 0;
                    while (ind < 4){
                        if (~(map.get_chunk_info(get_x_near_chunk(ind), get_y_near_chunk(ind)) = -1)){
                            let temp[tempSize] = ind;
                            let tempSize = tempSize + 1;
                        }
                        let ind = ind + 1;
                    }
                    let newDir = Game.random(temp, tempSize);
                    do temp.dispose();
                }
            }
        }
        do prototype.set_dir(newDir);
        return;
    }

    // interface-3 draw() -> draw the ghost on the screen 
    method void draw(){
        var Array image;
        
        var boolean reverse;
        if (image_state = 0){
            let image_state = 1;
        }else{
            let image_state = 0;
        }
        if (prototype.get_direction() = 2){
            let reverse = true;
        }else{
            let reverse = false;
        }
        let image = ghost_image[img_index()];
        do Draw.render(Game.translate_x_to_col(get_x()), Game.translate_y_to_row(get_y()), image, 16, reverse);
        return;
    }

    // interface-4 erase() -> erase the ghost on the screen
    method void erase(){
        do Screen.setColor(false); // white
        do Screen.drawRectangle(Game.translate_x_to_col(get_x()), Game.translate_y_to_row(get_y()+16), Game.translate_x_to_col(get_x()+16), Game.translate_y_to_row(get_y()));
        return;
    }
    
    method int best_direction(Map map){
        var int ind;
        var Array validMoves;
        var int validMoveNum;
        var int preventedDir;
        var int curBestDir;
        var int curDistance;
        var int tempDistance;
        let preventedDir = MoveableObj.oposite_direction(prototype.get_direction());
        let validMoves = Array.new(3);
        let validMoveNum = 0;
        let ind = 0;
        while (ind < 4){
            if ( ( ~ (ind = preventedDir) ) & (valid_move_direction(ind, map))) {
                let validMoves[validMoveNum] = ind;
                let validMoveNum = validMoveNum + 1;
            }
            let ind = ind + 1;
        }
        if (validMoveNum = 0){
            return preventedDir;
        }
        let curBestDir = validMoves[0];
        let curDistance = distance_between_target(get_x_nxt_chunk(validMoves[0]), get_y_nxt_chunk(validMoves[0]));
        let ind = 1;
        while (ind < validMoveNum){
            let tempDistance = distance_between_target(get_x_nxt_chunk(validMoves[ind]), get_y_nxt_chunk(validMoves[ind]));
            if (tempDistance < curDistance){
                let curBestDir = validMoves[ind];
            }
            let ind = ind + 1;
        }
        do validMoves.dispose();
        return curBestDir;
    }
    method int distance_between_target(int chunkX, int chunkY){
        return (((chunkX - targetXChunk)*(chunkX - targetXChunk)) + ((chunkY - targetYChunk)*(chunkY - targetYChunk)));
    }
    method boolean valid_move_direction(int dir, Map map){
        if ((dir = 0) | (dir = 2)){
            if (map.get_chunk_info(get_x_near_chunk(dir), get_y_chunk()) = -1){
                return false;
            }
            if (map.get_chunk_info(get_x_near_chunk(dir), (get_y_chunk()+1)) = -1){
                return false;
            }
            return true;
        }
        if ((dir = 1) | (dir = 3)){
            if (map.get_chunk_info(get_x_chunk(), get_y_near_chunk(dir)) = -1){
                return false;
            }
            if (map.get_chunk_info((get_x_chunk()+1), get_y_near_chunk(dir)) = -1){
                return false;
            }
            return true;
        }
        return true;
    }
    // to simulate "inheritance" behavior, put all the public methods here
    method void move(){
        do prototype.move();
        return;
    }
    method int get_x(){
        return prototype.get_x();
    } 
    method int get_y(){
        return prototype.get_y();
    }
    method int get_x_chunk(){
        return prototype.get_x_chunk();
    }
    method int get_y_chunk(){
        return prototype.get_y_chunk();
    }
    method int get_x_nxt_chunk(int dir){
        return prototype.get_x_nxt_chunk(dir);
    }
    method int get_y_nxt_chunk(int dir){
        return prototype.get_y_nxt_chunk(dir);
    }
    method int get_x_near_chunk(int dir){
        return prototype.get_x_near_chunk(dir);
    }
    method int get_y_near_chunk(int dir){
        return prototype.get_y_near_chunk(dir);
    }

    function Array generate_ghost_image(int state){
        
        var Array ptrs;
        let ptrs = Array.new(16);
        if (state = 0){
            let ptrs[0] =  Draw.image_row16_generator( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            let ptrs[1] =  Draw.image_row16_generator( 0, 0, 0, 0, 0, 0,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0);
            let ptrs[2] =  Draw.image_row16_generator( 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0);
            let ptrs[3] =  Draw.image_row16_generator( 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0);
            let ptrs[4] =  Draw.image_row16_generator( 0, 0,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1, 0, 0);
            let ptrs[5] =  Draw.image_row16_generator( 0, 0,-1,-1, 0, 0, 0, 0,-1,-1, 0, 0, 0, 0,-1, 0);
            let ptrs[6] =  Draw.image_row16_generator( 0, 0,-1,-1, 0,-1,-1, 0,-1,-1, 0,-1,-1, 0,-1, 0);
            let ptrs[7] =  Draw.image_row16_generator( 0,-1,-1,-1, 0, 0,-1, 0,-1,-1, 0, 0,-1, 0,-1, 0);
            let ptrs[8] =  Draw.image_row16_generator( 0,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1,-1, 0);
            let ptrs[9] =  Draw.image_row16_generator( 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0);
            let ptrs[10] = Draw.image_row16_generator( 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0);
            let ptrs[11] = Draw.image_row16_generator( 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0);
            let ptrs[12] = Draw.image_row16_generator( 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0);
            let ptrs[13] = Draw.image_row16_generator( 0,-1,-1, 0,-1,-1,-1, 0, 0,-1,-1,-1, 0,-1,-1, 0);
            let ptrs[14] = Draw.image_row16_generator( 0,-1, 0, 0, 0,-1,-1, 0, 0,-1,-1, 0, 0, 0,-1, 0);
            let ptrs[15] = Draw.image_row16_generator( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        if (state = 1){
            let ptrs[0] =  Draw.image_row16_generator( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            let ptrs[1] =  Draw.image_row16_generator( 0, 0, 0, 0, 0, 0,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0);
            let ptrs[2] =  Draw.image_row16_generator( 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0);
            let ptrs[3] =  Draw.image_row16_generator( 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0);
            let ptrs[4] =  Draw.image_row16_generator( 0, 0,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1, 0, 0);
            let ptrs[5] =  Draw.image_row16_generator( 0, 0,-1,-1, 0, 0,-1, 0,-1,-1, 0, 0,-1, 0,-1, 0);
            let ptrs[6] =  Draw.image_row16_generator( 0, 0,-1,-1, 0,-1,-1, 0,-1,-1, 0,-1,-1, 0,-1, 0);
            let ptrs[7] =  Draw.image_row16_generator( 0,-1,-1,-1, 0, 0, 0, 0,-1,-1, 0, 0, 0, 0,-1, 0);
            let ptrs[8] =  Draw.image_row16_generator( 0,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1,-1, 0);
            let ptrs[9] =  Draw.image_row16_generator( 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0);
            let ptrs[10] = Draw.image_row16_generator( 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0);
            let ptrs[11] = Draw.image_row16_generator( 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0);
            let ptrs[12] = Draw.image_row16_generator( 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0);
            let ptrs[13] = Draw.image_row16_generator( 0,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0);
            let ptrs[14] = Draw.image_row16_generator( 0, 0,-1,-1, 0, 0, 0,-1,-1, 0, 0, 0,-1,-1, 0, 0);
            let ptrs[15] = Draw.image_row16_generator( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        return ptrs;
    }

    method int img_index(){
        return image_state;
    }
    function void release_ghost_image(Array ptrs){
        var int i;
        var Array temp;
        let i = 0;
        while (i < 16){
            let temp = ptrs[i];
            do temp.dispose();
            let i = i + 1;
        }
        do ptrs.dispose();
        return;

    }

}