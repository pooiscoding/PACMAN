class Ghost {
    
    static Array ghost_image;

    // private
    field MoveableObj prototype; // simulate "inheritance" behavior
    field int state; // 0-transparent 1-weak 2-normal
    field int image_state;

    // public
    // initializer
    function void init(){
        let ghost_image = Array.new(2);
        let ghost_image[0] = Ghost.generate_ghost_image(0);
        let ghost_image[1] = Ghost.generate_ghost_image(1);
        return;
    }
    function void release(){
        do Ghost.release_ghost_image(ghost_image[0]);
        do Ghost.release_ghost_image(ghost_image[1]);
        do ghost_image.dispose();
        return;
    }
    // constructor
    constructor Ghost new(int startX, int startY, int direction){
        let prototype = MoveableObj.new(startX, startY, 5, direction);
        let state = 2;
        let image_state = 0;
        
        return this;
    }

    // deconstructor
    method void dispose(){
        do prototype.dispose();
        do Memory.deAlloc(this);
        return;
    }

    // interface-1 is_transparent() -> return whether the ghost is transparent or not
    method boolean is_transparent(){
        if (state = 0){
            return true;
        }
        return false;
    }

    // interface-2 update_direction() -> set the direction of the ghost
    method void update_direction(){ 
        var int newDir;
        let newDir = -1;
        if (is_transparent()){
            // transparent: towards the direction on the path going back to ghosts' home
            if (Game.ooxb(get_x()+16+prototype.get_speed())){
                let newDir = 2;
            }
            if (Game.ooxb(get_x()-prototype.get_speed())){
                let newDir = 0;
            }
            
        }else{
            // weak/normal: towards the direction calc by alg of ghost's ai
            if (Game.ooxb(get_x()+16+prototype.get_speed())){
                let newDir = 2;
                
            }
            if (Game.ooxb(get_x()-prototype.get_speed())){
                let newDir = 0;
            }
        }
        do prototype.set_dir(newDir);
        return;
    }

    // interface-3 draw() -> draw the ghost on the screen 
    method void draw(){
        var Array image;
        
        var boolean reverse;
        if (image_state = 0){
            let image_state = 1;
        }else{
            let image_state = 0;
        }
        if (prototype.get_direction() = 2){
            let reverse = true;
        }else{
            let reverse = false;
        }
        let image = ghost_image[img_index()];
        do Draw.render(Game.translate_x_to_col(get_x()), Game.translate_y_to_row(get_y()), image, 16, reverse);
        return;
    }

    // interface-4 erase() -> erase the ghost on the screen
    method void erase(){
        do Screen.setColor(false); // white
        do Screen.drawRectangle(Game.translate_x_to_col(get_x()), Game.translate_y_to_row(get_y()+16), Game.translate_x_to_col(get_x()+16), Game.translate_y_to_row(get_y()));
        return;
    }

    // to simulate "inheritance" behavior, put all the public methods here
    method void move(){
        do prototype.move();
        return;
    }
    method int get_x(){
        return prototype.get_x();
    } 
    method int get_y(){
        return prototype.get_y();
    }
    method int get_x_chunk(){
        return prototype.get_x_chunk();
    }
    method int get_y_chunk(){
        return prototype.get_y_chunk();
    }

    function Array generate_ghost_image(int state){
        
        var Array ptrs;
        var Array temp;
        var int ind;
        let ptrs = Array.new(16);
        let ind = 0;
        if (state = 0){
            let ptrs[0] =  Draw.image_row_generator( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            let ptrs[1] =  Draw.image_row_generator( 0, 0, 0, 0, 0, 0,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0);
            let ptrs[2] =  Draw.image_row_generator( 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0);
            let ptrs[3] =  Draw.image_row_generator( 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0);
            let ptrs[4] =  Draw.image_row_generator( 0, 0,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1, 0, 0);
            let ptrs[5] =  Draw.image_row_generator( 0, 0,-1,-1, 0, 0, 0, 0,-1,-1, 0, 0, 0, 0,-1, 0);
            let ptrs[6] =  Draw.image_row_generator( 0, 0,-1,-1, 0,-1,-1, 0,-1,-1, 0,-1,-1, 0,-1, 0);
            let ptrs[7] =  Draw.image_row_generator( 0,-1,-1,-1, 0, 0,-1, 0,-1,-1, 0, 0,-1, 0,-1, 0);
            let ptrs[8] =  Draw.image_row_generator( 0,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1,-1, 0);
            let ptrs[9] =  Draw.image_row_generator( 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0);
            let ptrs[10] = Draw.image_row_generator( 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0);
            let ptrs[11] = Draw.image_row_generator( 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0);
            let ptrs[12] = Draw.image_row_generator( 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0);
            let ptrs[13] = Draw.image_row_generator( 0,-1,-1, 0,-1,-1,-1, 0, 0,-1,-1,-1, 0,-1,-1, 0);
            let ptrs[14] = Draw.image_row_generator( 0,-1, 0, 0, 0,-1,-1, 0, 0,-1,-1, 0, 0, 0,-1, 0);
            let ptrs[15] = Draw.image_row_generator( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        if (state = 1){
            let ptrs[0] =  Draw.image_row_generator( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            let ptrs[1] =  Draw.image_row_generator( 0, 0, 0, 0, 0, 0,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0);
            let ptrs[2] =  Draw.image_row_generator( 0, 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0);
            let ptrs[3] =  Draw.image_row_generator( 0, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0);
            let ptrs[4] =  Draw.image_row_generator( 0, 0,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1, 0, 0);
            let ptrs[5] =  Draw.image_row_generator( 0, 0,-1,-1, 0, 0,-1, 0,-1,-1, 0, 0,-1, 0,-1, 0);
            let ptrs[6] =  Draw.image_row_generator( 0, 0,-1,-1, 0,-1,-1, 0,-1,-1, 0,-1,-1, 0,-1, 0);
            let ptrs[7] =  Draw.image_row_generator( 0,-1,-1,-1, 0, 0, 0, 0,-1,-1, 0, 0, 0, 0,-1, 0);
            let ptrs[8] =  Draw.image_row_generator( 0,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1,-1, 0);
            let ptrs[9] =  Draw.image_row_generator( 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0);
            let ptrs[10] = Draw.image_row_generator( 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0);
            let ptrs[11] = Draw.image_row_generator( 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0);
            let ptrs[12] = Draw.image_row_generator( 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0);
            let ptrs[13] = Draw.image_row_generator( 0,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0);
            let ptrs[14] = Draw.image_row_generator( 0, 0,-1,-1, 0, 0, 0,-1,-1, 0, 0, 0,-1,-1, 0, 0);
            let ptrs[15] = Draw.image_row_generator( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        return ptrs;
    }

    method int img_index(){
        return image_state;
    }
    function void release_ghost_image(Array ptrs){
        var int i;
        var Array temp;
        let i = 0;
        while (i < 16){
            let temp = ptrs[i];
            do temp.dispose();
            let i = i + 1;
        }
        do ptrs.dispose();
        return;

    }

}