class Map {
    static Array obstacleImg;
    static Array dotImg;
    field Array mapInfo; // 28row, 36col
    field int seed;
    method void render_map(){
        var int i;
        var int j;
        var Array temp;
        let i = 0;
        let j = 0;
        while (i < 28){
            let j = 0;
            let temp = mapInfo[i];
            while (j < 36){
                if (temp[j] = -1){
                    do Draw.render(Game.translate_x_to_col(j * 8), Game.translate_y_to_row(i * 8), obstacleImg, 8, false);
                }
                if (temp[j] = 1){
                    do Draw.render(Game.translate_x_to_col(j * 8 + 4),  Game.translate_y_to_row(i * 8 + 4), dotImg, 8, false);
                }
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }
    constructor Map new(int Seed){
        let mapInfo = Map.init_map_info(Seed);
        let seed = Seed;
        return this;
    }
    method int get_chunk_info(int x, int y){
        var Array temp;
        let temp = mapInfo[y];
        return temp[x];
    }
    method void dispose(){
        var int ind;
        var Array temp;
        let ind = 0;
        while (ind < 28){
            let temp = mapInfo[ind];
            do temp.dispose();
            let ind = ind + 1;
        }
        do mapInfo.dispose();
        return;
    }

    function void init(){
        let obstacleImg = Map.generate_obstacle_image();
        let dotImg = Map.generate_dot_image();
        return;
    }
    function void release(){
        do Map.release_obstacle_image();
        do Map.release_dot_image();
        return;
    }


    function Array generate_obstacle_image(){
        var Array ptrs;
        let ptrs = Array.new(8);
        
        let ptrs[0] =  Draw.image_row8_generator( 0, 0, 0, 0, 0, 0, 0, 0);
        let ptrs[1] =  Draw.image_row8_generator( 0,-1,-1,-1,-1,-1,-1, 0);
        let ptrs[2] =  Draw.image_row8_generator( 0,-1, 0, 0, 0, 0,-1, 0);
        let ptrs[3] =  Draw.image_row8_generator( 0,-1, 0, 0, 0, 0,-1, 0);
        let ptrs[4] =  Draw.image_row8_generator( 0,-1, 0, 0, 0, 0,-1, 0);
        let ptrs[5] =  Draw.image_row8_generator( 0,-1, 0, 0, 0, 0,-1, 0);
        let ptrs[6] =  Draw.image_row8_generator( 0,-1,-1,-1,-1,-1,-1, 0);
        let ptrs[7] =  Draw.image_row8_generator( 0, 0, 0, 0, 0, 0, 0, 0);
        
        return ptrs;
    }
    
    function Array generate_dot_image(){
        var Array ptrs;
        let ptrs = Array.new(8);
        
        let ptrs[0] =  Draw.image_row8_generator( 0, 0, 0, 0, 0, 0, 0, 0);
        let ptrs[1] =  Draw.image_row8_generator( 0, 0, 0,-1,-1, 0, 0, 0);
        let ptrs[2] =  Draw.image_row8_generator( 0, 0,-1,-1,-1,-1, 0, 0);
        let ptrs[3] =  Draw.image_row8_generator( 0,-1,-1,-1,-1,-1,-1, 0);
        let ptrs[4] =  Draw.image_row8_generator( 0,-1,-1,-1,-1,-1,-1, 0);
        let ptrs[5] =  Draw.image_row8_generator( 0, 0,-1,-1,-1,-1, 0, 0);
        let ptrs[6] =  Draw.image_row8_generator( 0, 0, 0,-1,-1, 0, 0, 0);
        let ptrs[7] =  Draw.image_row8_generator( 0, 0, 0, 0, 0, 0, 0, 0);
        
        return ptrs;
    }

    function void release_obstacle_image(){
        var int ind;
        var Array temp;
        let ind = 0;
        while (ind < 8){
            let temp = obstacleImg[ind];
            do temp.dispose();
            let ind = ind + 1;
        }
        do obstacleImg.dispose();
        return;
    }
    
    function void release_dot_image(){
        var int ind;
        var Array temp;
        let ind = 0;
        while (ind < 8){
            let temp = dotImg[ind];
            do temp.dispose();
            let ind = ind + 1;
        }
        do dotImg.dispose();
        return;
    }

    function Array init_map_info(int seed){
        var Array ptrs;
        let ptrs = Array.new(28);
        let ptrs[27] = Draw.map_row_generator(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1);
        let ptrs[26] = Draw.map_row_generator(-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[25] = Draw.map_row_generator(-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[24] = Draw.map_row_generator(-1, 0, 0,-1, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0,-1);
        let ptrs[23] = Draw.map_row_generator(-1, 0, 0,-1, 0, 0,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[22] = Draw.map_row_generator(-1, 0, 0,-1, 1, 0,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[21] = Draw.map_row_generator(-1, 0, 0,-1, 0, 0,-1,-1,-1, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1);
        let ptrs[20] = Draw.map_row_generator(-1, 0, 0,-1, 0, 0,-1,-1,-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[19] = Draw.map_row_generator(-1, 0, 0,-1, 1, 0,-1,-1,-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[18] = Draw.map_row_generator(-1, 0, 0,-1,-1,-1,-1,-1,-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[17] = Draw.map_row_generator(-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[16] = Draw.map_row_generator(-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[15] = Draw.map_row_generator(-1, 0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[14] = Draw.map_row_generator(-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[13] = Draw.map_row_generator(-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[12] = Draw.map_row_generator(-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[11] = Draw.map_row_generator(-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[10] = Draw.map_row_generator(-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[9] =  Draw.map_row_generator(-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[8] =  Draw.map_row_generator(-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[7] =  Draw.map_row_generator(-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[6] =  Draw.map_row_generator(-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[5] =  Draw.map_row_generator(-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[4] =  Draw.map_row_generator(-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[3] =  Draw.map_row_generator(-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[2] =  Draw.map_row_generator(-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[1] =  Draw.map_row_generator(-1, 1, 0,-1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1);
        let ptrs[0] =  Draw.map_row_generator(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1);
        return ptrs;
    }
}