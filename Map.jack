class Map {
    static Array obstacleImg;
    static Array dotImg;
    static Array effectDotImg;
    static Array bigDotImg;
    field Array mapInfo; // 28row, 36col
    field int seed;
    field int dotRemain;

    method void render_map(){
        var int i;
        var int j;
        var Array temp;
        let i = 0;
        let j = 0;
        while (i < 28){
            let j = 0;
            let temp = mapInfo[i];
            while (j < 36){
                if (temp[j] = -1){
                    do Draw.render(Game.translate_x_to_col(j * 8), Game.translate_y_to_row(i * 8), obstacleImg, 8, false);
                }
                if (temp[j] = 1){
                    do Draw.render(Game.translate_x_to_col(j * 8 + 4),  Game.translate_y_to_row(i * 8 + 4), dotImg, 8, false);
                }
                if (temp[j] = 2){
                    do Draw.render(Game.translate_x_to_col(j * 8 + 4),  Game.translate_y_to_row(i * 8 + 4), effectDotImg, 8, false);
                }
                if (temp[j] = 3){
                    do Draw.render(Game.translate_x_to_col(j * 8 + 4),  Game.translate_y_to_row(i * 8 + 4), bigDotImg, 8, false);
                }
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }
    constructor Map new(int Seed){
        let mapInfo = Map.init_map_info(Seed);
        let seed = Seed;
        let dotRemain = 110;
        return this;
    }
    method int get_chunk_info(int x, int y){
        var Array temp;
        let temp = mapInfo[y];
        return temp[x];
    }
    method void eat_chunk(int x, int y){
        var Array temp;
        let temp = mapInfo[y];
        let temp[x] = 0;
        do Screen.setColor(false); // white
        do Screen.drawRectangle(Game.translate_x_to_col(x*8), Game.translate_y_to_row(y*8+16), Game.translate_x_to_col(x*8+16), Game.translate_y_to_row(y*8));
        return;
    }
    method void reduce_dotRemain(){
        let dotRemain = dotRemain - 1;
        return;
    }
    method int get_dotRemain(){
        return dotRemain;
    }
    method void restore(int x, int y){
        
        var Array temp;
        let temp = mapInfo[y];
        if (temp[x] = 1){
            do Draw.render(Game.translate_x_to_col(x * 8 + 4),  Game.translate_y_to_row(y * 8 + 4), dotImg, 8, false);
        }
        if ((~Game.ooxb_chunk(x+1)) & (temp[x+1] = 1)){
            do Draw.render(Game.translate_x_to_col((x+1) * 8 + 4),  Game.translate_y_to_row(y * 8 + 4), dotImg, 8, false);
        }
        if ((~Game.ooxb_chunk(x+2)) & (temp[x+2] = 1)){
            do Draw.render(Game.translate_x_to_col((x+2) * 8 + 4),  Game.translate_y_to_row(y * 8 + 4), dotImg, 8, false);
        }
        if ((~Game.ooxb_chunk(x-1)) & (temp[x-1] = 1)){
            do Draw.render(Game.translate_x_to_col((x-1) * 8 + 4),  Game.translate_y_to_row(y * 8 + 4), dotImg, 8, false);
        }
        if (temp[x] = 2){
            do Draw.render(Game.translate_x_to_col(x * 8 + 4),  Game.translate_y_to_row(y * 8 + 4), effectDotImg, 8, false);
        }
        if ((~Game.ooxb_chunk(x+1)) & (temp[x+1] = 2)){
            do Draw.render(Game.translate_x_to_col((x+1) * 8 + 4),  Game.translate_y_to_row(y * 8 + 4), effectDotImg, 8, false);
        }
        if ((~Game.ooxb_chunk(x+2)) & (temp[x+2] = 2)){
            do Draw.render(Game.translate_x_to_col((x+2) * 8 + 4),  Game.translate_y_to_row(y * 8 + 4), effectDotImg, 8, false);
        }
        if ((~Game.ooxb_chunk(x-1)) & (temp[x-1] = 2)){
            do Draw.render(Game.translate_x_to_col((x-1) * 8 + 4),  Game.translate_y_to_row(y * 8 + 4), effectDotImg, 8, false);
        }
        if (temp[x] = 3){
            do Draw.render(Game.translate_x_to_col(x * 8 + 4),  Game.translate_y_to_row(y * 8 + 4), bigDotImg, 8, false);
        }
        if ((~Game.ooxb_chunk(x+1)) & (temp[x+1] = 3)){
            do Draw.render(Game.translate_x_to_col((x+1) * 8 + 4),  Game.translate_y_to_row(y * 8 + 4), bigDotImg, 8, false);
        }
        if ((~Game.ooxb_chunk(x+2)) & (temp[x+2] = 3)){
            do Draw.render(Game.translate_x_to_col((x+2) * 8 + 4),  Game.translate_y_to_row(y * 8 + 4), bigDotImg, 8, false);
        }
        if ((~Game.ooxb_chunk(x-1)) & (temp[x-1] = 3)){
            do Draw.render(Game.translate_x_to_col((x-1) * 8 + 4),  Game.translate_y_to_row(y * 8 + 4), bigDotImg, 8, false);
        }
        if (~Game.ooyb_chunk(y+1)){
            let temp = mapInfo[y+1];
            if (temp[x] = 1){
                do Draw.render(Game.translate_x_to_col(x * 8 + 4),  Game.translate_y_to_row((y+1) * 8 + 4), dotImg, 8, false);
            }
            if ((~Game.ooxb_chunk(x+1)) & (temp[x+1] = 1)){
                do Draw.render(Game.translate_x_to_col((x+1) * 8 + 4),  Game.translate_y_to_row((y+1) * 8 + 4), dotImg, 8, false);
            }
            if ((~Game.ooxb_chunk(x+2)) & (temp[x+2] = 1)){
                do Draw.render(Game.translate_x_to_col((x+2) * 8 + 4),  Game.translate_y_to_row((y+1) * 8 + 4), dotImg, 8, false);
            }
            if ((~Game.ooxb_chunk(x-1)) & (temp[x-1] = 1)){
                do Draw.render(Game.translate_x_to_col((x-1) * 8 + 4),  Game.translate_y_to_row((y+1) * 8 + 4), dotImg, 8, false);
            }
            if (temp[x] = 2){
                do Draw.render(Game.translate_x_to_col(x * 8 + 4),  Game.translate_y_to_row((y+1) * 8 + 4), effectDotImg, 8, false);
            }
            if ((~Game.ooxb_chunk(x+1)) & (temp[x+1] = 2)){
                do Draw.render(Game.translate_x_to_col((x+1) * 8 + 4),  Game.translate_y_to_row((y+1) * 8 + 4), effectDotImg, 8, false);
            }
            if ((~Game.ooxb_chunk(x+2)) & (temp[x+2] = 2)){
                do Draw.render(Game.translate_x_to_col((x+2) * 8 + 4),  Game.translate_y_to_row((y+1) * 8 + 4), effectDotImg, 8, false);
            }
            if ((~Game.ooxb_chunk(x-1)) & (temp[x-1] = 2)){
                do Draw.render(Game.translate_x_to_col((x-1) * 8 + 4),  Game.translate_y_to_row((y+1) * 8 + 4), effectDotImg, 8, false);
            }
            if (temp[x] = 3){
                do Draw.render(Game.translate_x_to_col(x * 8 + 4),  Game.translate_y_to_row((y+1) * 8 + 4), bigDotImg, 8, false);
            }
            if ((~Game.ooxb_chunk(x+1)) & (temp[x+1] = 3)){
                do Draw.render(Game.translate_x_to_col((x+1) * 8 + 4),  Game.translate_y_to_row((y+1) * 8 + 4), bigDotImg, 8, false);
            }
            if ((~Game.ooxb_chunk(x+2)) & (temp[x+2] = 3)){
                do Draw.render(Game.translate_x_to_col((x+2) * 8 + 4),  Game.translate_y_to_row((y+1) * 8 + 4), bigDotImg, 8, false);
            }
            if ((~Game.ooxb_chunk(x-1)) & (temp[x-1] = 3)){
                do Draw.render(Game.translate_x_to_col((x-1) * 8 + 4),  Game.translate_y_to_row((y+1) * 8 + 4), bigDotImg, 8, false);
            }
        }
        if (~Game.ooyb_chunk(y+2)){
            let temp = mapInfo[y+2];
            if (temp[x] = 1){
                do Draw.render(Game.translate_x_to_col(x * 8 + 4),  Game.translate_y_to_row((y+2) * 8 + 4), dotImg, 8, false);
            }
            if (temp[x] = 2){
                do Draw.render(Game.translate_x_to_col(x * 8 + 4),  Game.translate_y_to_row((y+2) * 8 + 4), effectDotImg, 8, false);
            }
            if (temp[x] = 3){
                do Draw.render(Game.translate_x_to_col(x * 8 + 4),  Game.translate_y_to_row((y+2) * 8 + 4), bigDotImg, 8, false);
            }
        }
        if (~Game.ooyb_chunk(y-1)){
            let temp = mapInfo[y-1];
            if (temp[x] = 1){
                do Draw.render(Game.translate_x_to_col(x * 8 + 4),  Game.translate_y_to_row((y-1) * 8 + 4), dotImg, 8, false);
            }
            if (temp[x] = 2){
                do Draw.render(Game.translate_x_to_col(x * 8 + 4),  Game.translate_y_to_row((y-1) * 8 + 4), effectDotImg, 8, false);
            }
            if (temp[x] = 3){
                do Draw.render(Game.translate_x_to_col(x * 8 + 4),  Game.translate_y_to_row((y-1) * 8 + 4), bigDotImg, 8, false);
            }
        }
        return;
    }
    method void dispose(){
        var int ind;
        var Array temp;
        let ind = 0;
        while (ind < 28){
            let temp = mapInfo[ind];
            do temp.dispose();
            let ind = ind + 1;
        }
        do mapInfo.dispose();
        do Memory.deAlloc(this);
        return;
    }
    function void init(){
        let obstacleImg = Map.generate_obstacle_image();
        let dotImg = Map.generate_dot_image();
        let effectDotImg = Map.generate_effectDot_image();
        let bigDotImg = Map.generate_bigDot_image();
        return;
    }
    function void release(){
        do Map.release_image(obstacleImg);
        do Map.release_image(dotImg);
        do Map.release_image(effectDotImg);
        do Map.release_image(bigDotImg);
        return;
    }
    function Array generate_obstacle_image(){
        var Array ptrs;
        let ptrs = Array.new(8);
        
        let ptrs[0] =  Draw.image_row8_generator( 0, 0, 0, 0, 0, 0, 0, 0);
        let ptrs[1] =  Draw.image_row8_generator( 0,-1,-1,-1,-1,-1,-1, 0);
        let ptrs[2] =  Draw.image_row8_generator( 0,-1, 0, 0, 0, 0,-1, 0);
        let ptrs[3] =  Draw.image_row8_generator( 0,-1, 0, 0, 0, 0,-1, 0);
        let ptrs[4] =  Draw.image_row8_generator( 0,-1, 0, 0, 0, 0,-1, 0);
        let ptrs[5] =  Draw.image_row8_generator( 0,-1, 0, 0, 0, 0,-1, 0);
        let ptrs[6] =  Draw.image_row8_generator( 0,-1,-1,-1,-1,-1,-1, 0);
        let ptrs[7] =  Draw.image_row8_generator( 0, 0, 0, 0, 0, 0, 0, 0);
        
        return ptrs;
    }
    function Array generate_dot_image(){
        var Array ptrs;
        let ptrs = Array.new(8);
        
        let ptrs[0] =  Draw.image_row8_generator( 0, 0, 0, 0, 0, 0, 0, 0);
        let ptrs[1] =  Draw.image_row8_generator( 0, 0, 0,-1,-1, 0, 0, 0);
        let ptrs[2] =  Draw.image_row8_generator( 0, 0,-1,-1,-1,-1, 0, 0);
        let ptrs[3] =  Draw.image_row8_generator( 0,-1,-1,-1,-1,-1,-1, 0);
        let ptrs[4] =  Draw.image_row8_generator( 0,-1,-1,-1,-1,-1,-1, 0);
        let ptrs[5] =  Draw.image_row8_generator( 0, 0,-1,-1,-1,-1, 0, 0);
        let ptrs[6] =  Draw.image_row8_generator( 0, 0, 0,-1,-1, 0, 0, 0);
        let ptrs[7] =  Draw.image_row8_generator( 0, 0, 0, 0, 0, 0, 0, 0);
        
        return ptrs;
    }
    function Array generate_effectDot_image(){
        var Array ptrs;
        let ptrs = Array.new(8);
        let ptrs[0] =  Draw.image_row8_generator(-1,-1, 0, 0, 0, 0,-1,-1);
        let ptrs[1] =  Draw.image_row8_generator(-1,-1, 0, 0,-1, 0,-1,-1);
        let ptrs[2] =  Draw.image_row8_generator( 0, 0, 0,-1,-1, 0, 0, 0);
        let ptrs[3] =  Draw.image_row8_generator( 0,-1,-1,-1,-1,-1, 0, 0);
        let ptrs[4] =  Draw.image_row8_generator( 0, 0,-1,-1,-1,-1,-1, 0);
        let ptrs[5] =  Draw.image_row8_generator( 0, 0, 0,-1,-1, 0, 0, 0);
        let ptrs[6] =  Draw.image_row8_generator(-1,-1, 0,-1, 0, 0,-1,-1);
        let ptrs[7] =  Draw.image_row8_generator(-1,-1, 0, 0, 0, 0,-1,-1);
        return ptrs;
    }
    function Array generate_bigDot_image(){
        var Array ptrs;
        let ptrs = Array.new(8);
        let ptrs[0] =  Draw.image_row8_generator( 0, 0,-1,-1,-1,-1, 0, 0);
        let ptrs[1] =  Draw.image_row8_generator( 0,-1,-1,-1,-1,-1,-1, 0);
        let ptrs[2] =  Draw.image_row8_generator(-1,-1,-1,-1,-1,-1,-1,-1);
        let ptrs[3] =  Draw.image_row8_generator(-1,-1,-1,-1,-1,-1,-1,-1);
        let ptrs[4] =  Draw.image_row8_generator(-1,-1,-1,-1,-1,-1,-1,-1);
        let ptrs[5] =  Draw.image_row8_generator(-1,-1,-1,-1,-1,-1,-1,-1);
        let ptrs[6] =  Draw.image_row8_generator( 0,-1,-1,-1,-1,-1,-1, 0);
        let ptrs[7] =  Draw.image_row8_generator( 0, 0,-1,-1,-1,-1, 0, 0);
        return ptrs;
    }

    function void release_image(Array img){
        var int ind;
        var Array temp;
        let ind = 0;
        while (ind < 8){
            let temp = img[ind];
            do temp.dispose();
            let ind = ind + 1;
        }
        do img.dispose();
        return;
    }
    function Array init_map_info(int seed){
        var Array ptrs;
        let ptrs = Array.new(28);
        // 104 dots-1, 4 special effect-2, 6 big dot-3 
        let ptrs[27] = Draw.map_row_generator( 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0);
        let ptrs[26] = Draw.map_row_generator( 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1, 0, 0);
        let ptrs[25] = Draw.map_row_generator( 0,-1, 1, 0, 1, 0, 1, 0, 0, 1, 0,-1,-1,-1,-1, 1, 0,-1,-1,-1,-1, 1, 0, 1, 0, 1, 0,-1, 1, 0, 0, 1, 0,-1, 0, 0);
        let ptrs[24] = Draw.map_row_generator( 0,-1, 0, 0,-1,-1, 0, 0,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1,-1, 0, 0, 0, 0, 0,-1, 0, 0,-1, 0, 0);
        let ptrs[23] = Draw.map_row_generator( 0,-1, 0, 0,-1,-1, 0, 0,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1,-1, 1, 0, 0, 2, 0,-1, 1, 0,-1, 0, 0);
        let ptrs[22] = Draw.map_row_generator( 0,-1, 1, 0,-1,-1, 3, 0,-1, 1, 0,-1,-1,-1,-1, 1, 0,-1,-1,-1,-1, 3, 0,-1,-1,-1,-1,-1, 0, 0,-1, 0, 0,-1, 0, 0);
        let ptrs[21] = Draw.map_row_generator( 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 1, 0,-1, 0, 0);
        let ptrs[20] = Draw.map_row_generator( 0,-1, 1, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0,-1, 0, 0,-1, 0, 0);
        let ptrs[19] = Draw.map_row_generator( 0,-1, 0, 0,-1,-1, 0, 0,-1,-1,-1,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1,-1, 0, 0,-1,-1,-1,-1, 3, 0,-1, 0, 0);
        let ptrs[18] = Draw.map_row_generator( 0,-1, 0, 0,-1,-1, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1, 0, 0, 0, 0, 0,-1, 0, 0,-1, 0, 0);
        let ptrs[17] = Draw.map_row_generator( 0,-1, 1, 0,-1,-1, 1, 0, 0, 1, 0,-1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,-1,-1, 1, 0, 0, 1, 0,-1, 1, 0,-1, 0, 0);
        let ptrs[16] = Draw.map_row_generator( 0,-1, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1,-1,-1,-1, 0, 0,-1, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1, 0, 0);
        let ptrs[15] = Draw.map_row_generator( 0,-1, 1, 0, 1, 0, 1, 0,-1, 1, 0, 0, 1, 0,-1, 0, 0,-1, 1, 0,-1, 1, 0, 1, 0, 1, 0,-1, 1, 0, 0, 1, 0,-1, 0, 0);
        let ptrs[14] = Draw.map_row_generator( 0,-1,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1, 0, 0);
        let ptrs[13] = Draw.map_row_generator( 0,-1,-1,-1,-1,-1, 1, 0,-1,-1,-1,-1, 1, 0, 0, 3, 0, 0, 1, 0,-1,-1,-1,-1,-1, 1, 0,-1,-1,-1,-1, 1, 0,-1, 0, 0);
        let ptrs[12] = Draw.map_row_generator( 0,-1, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1, 0, 0,-1, 0, 0,-1, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1, 0, 0);
        let ptrs[11] = Draw.map_row_generator( 0,-1, 1, 0, 1, 0, 1, 0,-1, 1, 0, 0, 1, 0,-1,-1,-1,-1, 1, 0,-1, 1, 0, 1, 0, 1, 0,-1, 1, 0, 0, 1, 0,-1, 0, 0);
        let ptrs[10] = Draw.map_row_generator( 0,-1, 0, 0,-1,-1, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1, 0, 0, 0, 0, 0,-1, 0, 0,-1, 0, 0);
        let ptrs[9] =  Draw.map_row_generator( 0,-1, 0, 0,-1,-1, 1, 0, 0, 1, 0,-1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 1, 0,-1,-1, 1, 0, 0, 1, 0,-1, 1, 0,-1, 0, 0);
        let ptrs[8] =  Draw.map_row_generator( 0,-1, 1, 0,-1,-1, 0, 0,-1,-1,-1,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1, 0, 0);
        let ptrs[7] =  Draw.map_row_generator( 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 1, 0,-1, 0, 0);
        let ptrs[6] =  Draw.map_row_generator( 0,-1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0,-1, 0, 0,-1, 0, 0);
        let ptrs[5] =  Draw.map_row_generator( 0,-1, 0, 0,-1,-1, 0, 0,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1,-1, 0, 0,-1, 1, 0,-1, 0, 0);
        let ptrs[4] =  Draw.map_row_generator( 0,-1, 0, 0,-1,-1, 0, 0,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0,-1,-1, 0, 0, 0, 0, 0,-1, 0, 0,-1, 0, 0);
        let ptrs[3] =  Draw.map_row_generator( 0,-1, 1, 0,-1,-1, 1, 0,-1, 1, 0,-1,-1,-1,-1, 1, 0,-1,-1,-1,-1, 3, 0,-1,-1, 1, 0, 0, 1, 0,-1, 2, 0,-1, 0, 0);
        let ptrs[2] =  Draw.map_row_generator( 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1, 0, 0);
        let ptrs[1] =  Draw.map_row_generator( 0,-1, 1, 0, 1, 0, 3, 0, 0, 1, 0,-1,-1,-1,-1, 1, 0,-1,-1,-1,-1, 1, 0, 1, 0, 1, 0,-1, 1, 0, 0, 1, 0,-1, 0, 0);
        let ptrs[0] =  Draw.map_row_generator( 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0);
        return ptrs;
    }
}